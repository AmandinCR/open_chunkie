@function readme_chunks()
%README
%
% This software is being released under a modified FreeBSD
% license
%
% The chunks library is Copyright (c) 2018: the chunkie
% team
%
% Contact: askham@uw.edu
% 


@function [x,w,u,v] = legeexps(k)

itype = 0;
if nargout > 1; itype = 1; end
if nargout > 2; itype = 2; end

if itype == 0
   x = zeros(k,1);
   w = zeros(1,1);
   u = zeros(1,1);
   v = zeros(1,1);
end 

if itype == 1
   x = zeros(k,1);
   w = zeros(k,1);
   u = zeros(1,1);
   v = zeros(1,1);
end 

if itype == 2
   x = zeros(k,1);
   w = zeros(k,1);
   u = zeros(k,k);
   v = zeros(k,k);
end 

# FORTRAN legeexps(int[1] itype, int[1] k, inout double[] x, inout double[] u, inout double[] v, inout double[] w);

end

@function vals = legeexevvec(x,coef)

k = length(coef);
km1 = k-1;

sz = size(x);

x = x(:);
n = length(x);
vals = zeros(n,1);

if isreal(coef)

   # FORTRAN legeexevvec(int[1] n, double[] x, inout double[] vals, double[] coef, int[1] km1);

else

   vals2 = zeros(n,1);
   rcoef = real(coef); icoef = imag(coef);
   # FORTRAN legeexevvec(int[1] n, double[] x, inout double[] vals, double[] rcoef, int[1] km1);
   
   # FORTRAN legeexevvec(int[1] n, double[] x, inout double[] vals2, double[] icoef, int[1] km1);

   vals = vals+1i*vals2;

end

vals = reshape(vals,sz);

end

@function [x,w] = legerts(k)

   itype = 0;
   if nargout > 1
      itype = 1;
   end
   x = zeros(k,1); w = zeros(k,1);
# FORTRAN legerts(int[1] itype, int[1] k, inout double[] x, inout double[] w);

end

@function ainterp = lematrin(k,x)

   m = length(x);
   work = zeros(2*k^2+k+500,1);
   t = zeros(k,1);
   ainterp = zeros(m,k);

# FORTRAN lematrin(int[1] k, int[1] m, double[] x, inout double[] ainterp, inout double[] t, inout double[] work);

end

@function [xs1,whts1,xs0,whts0] = getquads(k)
   nquad1 = 0;
   nquad0 = 0;

# FORTRAN getquadsinfo(int[1] k, inout int[1] nquad1, inout int[1] nquad0);

   xs1 = zeros(nquad1,1); whts1 = zeros(nquad1,1);
   xs0 = zeros(nquad0,k); whts0 = zeros(nquad0,k);

# FORTRAN getquads(int[1] k, inout int[1] nquad1, inout double[] xs1, inout double[] whts1, inout int[1] nquad0, inout double[] xs0, inout double[] whts0);

end